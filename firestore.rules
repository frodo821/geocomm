rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	function isValidMessage(data, uid) {
      return
        uid != null &&
        data != null &&
        data.keys().hasOnly([
          'at', 'user_id', 'channel_a', 'channel_b', 'channel_c',
          'content', 'geohash', 'reply_to', 'sent_at', 'embeddings', 'original'
        ]) &&
        data.keys().hasAll([
          'at', 'user_id', 'channel_a', 'channel_b', 'channel_c',
          'content', 'geohash', 'reply_to', 'sent_at', 'embeddings'
        ]) &&
        data.at is latlng &&
        data.user_id is string && data.user_id == uid &&
        data.channel_a is number &&
        data.channel_b is number &&
        data.channel_c is number &&
        data.content is string &&
        data.geohash is string &&
        (data.reply_to is string || data.reply_to == null) &&
        data.sent_at is timestamp &&
        data.embeddings is list &&
        ((!('original' in data)) || data.original is string);
  	}
    
    function isValidUserData(data) {
    	return data.keys().hasOnly(['created_at', 'display_name']) &&
      			 data.keys().hasAll(['created_at', 'display_name']);
    }
    
    function isAllowedUpdateUserData(original, updating) {
    	return updating.diff(original).affectedKeys().hasOnly(['display_name']);
    }

    match /messages/{message_id} {
    	allow read: if true;
      allow update: if false;
      allow create: if isValidMessage(request.resource.data, request.auth.uid);
      allow delete: if resource.data.user_id == request.auth.uid;
    }

    match /users {
      allow write: if false;
      allow read: if true;

      match /{userId} {
        allow create: if request.auth.uid != null && isValidUserData(request.resource.data);
        allow update: if request.auth.uid == userId &&
                         isAllowedUpdateUserData(resource.data, request.resource.data);
        allow read: if true;
      }
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
